[flake8]
ignore =
  W503,  # Line break occurred before a binary operator - better line split before than after
  ; WPS115,  # Upper case constant in a class
  WPS100,  # Wrong module name - django has a standard structure
  WPS121,  # Used _ variabled - in django it's common to use it for translation
  WPS201,  # Too many imports - not applicable in django
  WPS202,  # Too many module members - not applicable in django
  WPS204,  # Overused expression - in a framework it could be common
  WPS215,  # Too many base classes - viewsets inherits from very many classes
  WPS226,  # Too many uses of a string - sometimes we just need to use the same parameter many times
  WPS232,  # Module too complex - django has standard structures and classes
  WPS305,  # `f` formatted string - useful tool
  WPS306,  # Class without base class - we prefer new python 3 notation without explicitely inherit from object
  WPS410,  # Version info in __init__ - TODO should be imported from outside
  WPS412,  # Logic in __init__ - TODO info should be imported as is from outside
  WPS431,  # Nested class - all the times we need nested classes as Meta
  ; WPS432,  # Esplicitely use numbers
  WPS601  # Forbids to shadow class level attributes with instance level attributes - Django uses metaclasses, so we need both
per-file-ignores =
    # S101:   Use of assert - in tests it is normal to use it
    # WPS114: Underscore named pattern - convention for test names
    # WPS118: Too long names - convention for test names
    # WPS214: Too many methods - class-based tests
    # WPS230: Too many attributes - class-based tests setup
    # WPS300: Local imports - in tests we want to be independent from the outside
    # WPS432: Magic numbers - we need fixed values in tests
    */tests/*: S101,WPS114,WPS118,WPS214,WPS230,WPS300,WPS432
    # WPS115: Uppercase constants in a class - enum in models
    */models.py: WPS115,WPS432
    # F401: imported but not used
    # WPS301: dotted raw import
    # WPS420: pass
    # WPS433: nested import
    # Usually (in this standard) classes in apps are defined as:
    # class Something(AppConfig):
    #    ...
    #    def ready(self):
    #        try:
    #            import <a module>.signals
    #        except ImportError:
    #            pass
    */apps.py:F401,WPS301,WPS420,WPS433
max-line-length = 120
exclude = .tox,.git,*/migrations/*,*/static/CACHE/*,docs,node_modules,venv,.venv

[pycodestyle]
max-line-length = 120
exclude = .tox,.git,*/migrations/*,*/static/CACHE/*,docs,node_modules,venv,.venv

[isort]
line_length = 88
known_first_party = {{cookiecutter.project_slug}},config
multi_line_output = 3
default_section = THIRDPARTY
skip = venv/
skip_glob = **/migrations/*.py
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true

[mypy]
python_version = 3.10
check_untyped_defs = True
ignore_missing_imports = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unused_configs = True
plugins =
  mypy_django_plugin.main,
  mypy_drf_plugin.main

[mypy.plugins.django-stubs]
django_settings_module = config.settings.test

[mypy-*.migrations.*]
# Django migrations should not produce any errors:
ignore_errors = True

[isort]
force_single_line = True

[darglint]
strictness=short

[coverage:run]
include = {{cookiecutter.project_slug}}/**
omit = *migrations*, *tests*
plugins =
    django_coverage_plugin
